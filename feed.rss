<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>vickcoo</title><description>iOS Developer</description><link>https://vickcoo.github.io</link><language>zh-Hant</language><lastBuildDate>Tue, 3 Sep 2024 21:01:16 +0800</lastBuildDate><pubDate>Tue, 3 Sep 2024 21:01:16 +0800</pubDate><ttl>250</ttl><atom:link href="https://vickcoo.github.io/feed.rss" rel="self" type="application/rss+xml"/><item><guid isPermaLink="true">https://vickcoo.github.io/posts/Intro-ARC%5Ben%5D</guid><title>Leave Memory Troubles to ARC</title><description>In Swift, ARC is an essential concept responsible for memory management, ensuring that objects no longer in use are properly released. This article will provide a detailed explanation of how ARC works and how to avoid common memory leak issues.</description><link>https://vickcoo.github.io/posts/Intro-ARC%5Ben%5D</link><pubDate>Wed, 25 Oct 2023 11:26:00 +0800</pubDate><content:encoded><![CDATA[<p><a href="https://en.wikipedia.org/wiki/Automatic_Reference_Counting">Automatic Reference Counting</a>, abbreviated as <strong>ARC</strong>, is a key feature of the Swift programming language. It is responsible for managing the lifecycle of objects in memory to ensure efficient allocation and deallocation of memory resources. ARC works automatically and lets you even do not manually manage memory, reducing the risks of memory leaks and improper deallocation.</p><ul><li>Swift automatically manages memory and does not need manual intervention. However, you should consider the relationships between objects to prevent memory leaks.</li><li>Every time an instance of a class is created, ARC allocates memory to store all the data about that instance.</li><li>ARC automatically releases objects in memory when their lifetime ends.</li></ul><h2>How ARC Works</h2><p>Its operation is simple. When an object is created, its ARC is initialized to 1. When new references point to this object, the ARC is incremented by 1. When a reference no longer exists, the ARC is decremented by 1. It's a straightforward addition and subtraction!</p><p>Let's explain this in two different ways:</p><h3>Text Version</h3><p>One day, David was walking down the street and saw a shiny <code>iPhone XR</code>. He was attracted to its features and appearance, so he decided to take it and became its owner. At this point, because David referenced the <code>iPhone XR</code>, the iPhone's ARC increased to 2.</p><p>After a while, John also walked by and saw the <code>iPhone XR</code>. He claimed that the phone belonged to him and requested it from David. Now, the iPhone's ARC became 3.</p><p>However, this situation didn't last long. Shortly after, a police officer appeared, investigated the phone's origin, and found out that the iPhone didn't belong to David or John. They were both informed that they couldn't possess the phone because it didn't belong to either of them. As a result, both David and John canceled their references to the iPhone, and the ARC quickly decreased to 1.</p><p>Finally, since no one knew who the phone belonged to, it was decided to be destroyed, and the <code>iPhone XR</code> also canceled its reference to the iPhone. So, the ARC became zero, and it disappeared from the world (released from memory).</p><h3>Code Version</h3><p>The classes <code>Phone</code> and <code>Person</code> used in the story can be found in the following code:</p><pre><code><span class="comment">// One day, David was walking down the street and saw a shiny `iPhone XR`. He was attracted to its features and appearance, so he decided to take it and became its owner. At this point, because David referenced the `iPhone XR`, the iPhone's ARC increased to 2.</span>
<span class="keyword">var</span> iPhone: <span class="type">Phone</span>? = <span class="type">Phone</span>(name: <span class="string">"iPhone XR"</span>) <span class="comment">// ARC = 1</span>
<span class="keyword">var</span> david: <span class="type">Person</span> = <span class="type">Person</span>(name: <span class="string">"David"</span>)
david.<span class="property">phone</span> = iPhone <span class="comment">// ARC = 2

// After a while, John also walked by and saw the `iPhone XR`. He claimed that the phone belonged to him and requested it from David. Now, the iPhone's ARC became 3.</span>
<span class="keyword">var</span> john: <span class="type">Person</span> = <span class="type">Person</span>(name: <span class="string">"John"</span>)
john.<span class="property">phone</span> = iPhone <span class="comment">// ARC = 3

// However, this situation didn't last long. Shortly after, a police officer appeared, investigated the phone's origin, and found out that the iPhone didn't belong to David or John. They were both informed that they couldn't possess the phone because it didn't belong to either of them. As a result, both David and John canceled their references to the iPhone, and the ARC quickly decreased to 1.</span>
david.<span class="property">phone</span> = <span class="keyword">nil</span> <span class="comment">// ARC = 2</span>
john.<span class="property">phone</span> = <span class="keyword">nil</span> <span class="comment">// ARC = 1

// Finally, since no one knew who the phone belonged to, it was decided to be destroyed, and the `iPhone XR` also canceled its reference to the iPhone. So, the ARC became zero, and it disappeared from the world (released from memory).</span>
iPhone = <span class="keyword">nil</span> <span class="comment">// ARC = 0</span>
</code></pre><pre><code><span class="keyword">class</span> Person {
    <span class="keyword">var</span> name: <span class="type">String</span>
    <span class="keyword">var</span> phone: <span class="type">Phone</span>?
    <span class="keyword">init</span> (name: <span class="type">String</span>) {
        <span class="keyword">self</span>.<span class="property">name</span> = name
    }
}

<span class="keyword">class</span> Phone {
    <span class="keyword">var</span> name: <span class="type">String</span>
    <span class="keyword">init</span>(name: <span class="type">String</span>) {
        <span class="keyword">self</span>.<span class="property">name</span> = name
    }
}
</code></pre><h2>What is a Retain Cycle, and How Does It Happen?</h2><p>A Retain Cycle refers to an object existing in memory without a way to be released. It occurs when two objects strong reference each other. The following examples explain this.</p><h3>Story Version</h3><p>In a distant universe, two stars existed. They attracted each other, as if destined to shine together, but their meeting was not as simple as it seemed.</p><p>My girlfriend and I loved stargazing, and one day, we found two incredibly beautiful stars. We decided to make them ours and named them <code>Shelly</code> and <code>Ben</code>. These two stars attracted each other, creating a mysterious connection, much like a romantic relationship. They established an invisible link in the universe, combining their radiance.</p><p>One day, my girlfriend and I lost interest in stargazing and decided to disconnect from those stars. However, the radiance of the stars didn't disappear. This happened because these two stars had formed a strong bond, leaving a faint line of radiance in the universe, causing them to reference each other.</p><p>Even though we no longer observed these stars and couldn't find them, their radiance continued to exist because ARC maintained their existence. They would shine forever in the universe, unable to be referenced, much like old lovers who could never meet again.</p><p>This story reflects how Automatic Reference Counting (ARC) operates. Even when the reference relationship between objects is severed, if ARC still holds references to them, they will persist, unable to be deallocated. ARC ensures correct memory management but reminds us to handle references carefully to avoid unexpected situations.</p><h3>Code Version</h3><p>The classes <code>Star</code> and <code>Person</code> used in the story can be found in the following code:</p><pre><code><span class="keyword">var</span> me: <span class="type">Person</span> = <span class="type">Person</span>(name: <span class="string">"me"</span>)
<span class="keyword">var</span> girlfriend: <span class="type">Person</span> = <span class="type">Person</span>(name: <span class="string">"girlfriend"</span>)
<span class="comment">// We loved stargazing, and one day, we found two incredibly beautiful stars, and we decided to make them ours and named them `Shelly` and `Ben`</span>
var shelly: <span class="type">Star</span> = <span class="type">Star</span>(name: <span class="string">"Shelly"</span>) <span class="comment">// shelly ARC = 1</span>
<span class="keyword">var</span> ben: <span class="type">Star</span> = <span class="type">Star</span>(name: <span class="string">"Ben"</span>) <span class="comment">// ben ARC = 1</span>

me.<span class="property">star</span> = ben
girlfriend.<span class="property">star</span> = shelly

<span class="comment">// These two stars attracted each other, creating a mysterious connection, much like a romantic relationship. They established an invisible link in the universe, combining their radiance.</span>
ben.<span class="property">linkStar</span> = shelly <span class="comment">// ben ARC = 2</span>
shelly.<span class="property">linkStar</span> = ben <span class="comment">// shelly ARC = 2

// One day, my girlfriend and I lost interest in stargazing and decided to disconnect from those stars.</span>
me.<span class="property">star</span> = <span class="keyword">nil</span> <span class="comment">// ben ARC = 1</span>
girlfriend.<span class="property">star</span> = <span class="keyword">nil</span> <span class="comment">// shelly ARC = 1

// However, the radiance of the stars didn't disappear. This happened because these two stars had formed a strong bond, leaving a faint line of radiance in the universe, causing them to reference each other.
// Even though we no longer observed these stars and couldn't find them, their radiance continued to exist because ARC maintained their existence. They would shine forever in the universe, unable to be referenced, much like old lovers who could never meet again.
// This story illustrates the operation of Automatic Reference Counting (ARC). Even when the reference relationships between objects have been severed, if ARC still holds references to them, they will continue to exist, unable to be deallocated. ARC ensures proper memory management but also reminds us to handle references carefully to prevent unexpected situations.</span>
</code></pre><pre><code><span class="keyword">class</span> Person {
    <span class="keyword">var</span> name: <span class="type">String</span>
    <span class="keyword">var</span> star: <span class="type">Star</span>?
    <span class="keyword">init</span>(name: <span class="type">String</span>) {
        <span class="keyword">self</span>.<span class="property">name</span> = name
    }
}

<span class="keyword">class</span> Star {
    <span class="keyword">var</span> name: <span class="type">String</span>
    <span class="keyword">var</span> linkStar: <span class="type">Star</span>?
    <span class="keyword">init</span>(name: <span class="type">String</span>) {
        <span class="keyword">self</span>.<span class="property">name</span> = name
    }
}
</code></pre><h2>How to Avoid Memory Leaks</h2><p>As mentioned earlier, a Retain Cycle can lead to Memory Leaks.</p><ul><li>A Retain Cycle occurs with strong references between two objects.</li><li>A Memory Leak happens when an object exists in memory, but the program can't access it or release it.</li></ul><p>To avoid these issues, two keywords come to the rescue. Both methods involve preventing the object from being counted in the ARC:</p><p>The first one is <strong>weak</strong>. You can use it by adding <code>weak</code> in front of the variable declaration, like this:</p><pre><code><span class="keyword">weak var</span> star: <span class="type">Star</span>?
</code></pre><p>The second one is <strong>unowned</strong>. It is similar to <code>weak</code> but without the optionality. You can use it when you're sure that the object won't become <code>nil</code> before its lifecycle ends:</p><pre><code><span class="keyword">unowned var</span> star: <span class="type">Star</span>
</code></pre><p>In summary:</p><ul><li>Use <code>weak</code> with <code>optional</code> variables.</li><li>Use <code>unowned</code> with <code>non-optional</code> variables.</li></ul><h2>Reference</h2><ul><li><a href="https://docs.swift.org/swift-book/documentation/the-swift-programming-language/automaticreferencecounting/">The Swift Programming Language (5.9) - Automatic Reference Counting</a></li><li><a href="https://chunyili200556.medium.com/">ChunYi LI</a> 的 <a href="https://medium.com/one-two-swift/arc-%E8%A8%98%E6%86%B6%E9%AB%94%E7%AE%A1%E7%90%86-weak-unowned-b3f5ae4239c7">Swift基礎 — ARC 記憶體管理Weak 、Unowned</a></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://vickcoo.github.io/posts/Intro-ARC%5Bzh-TW%5D</guid><title>將記憶體煩惱留給ARC</title><description>在Swift中，ARC是一個重要的概念，它負責管理記憶體，確保不再使用的物件能夠被正確釋放。本文將詳細解釋ARC的工作原理，以及如何避免常見的記憶體洩漏問題。</description><link>https://vickcoo.github.io/posts/Intro-ARC%5Bzh-TW%5D</link><pubDate>Wed, 25 Oct 2023 11:26:00 +0800</pubDate><content:encoded><![CDATA[<p><a href="https://zh.wikipedia.org/wiki/%E8%87%AA%E5%8A%A8%E5%BC%95%E7%94%A8%E8%AE%A1%E6%95%B0">自動引用計數</a>（Automatic Reference Counting，簡稱<strong>ARC</strong>）是Swift語言的一個關鍵功能，它負責管理物件在記憶體中的生命週期，以確保記憶體資源能夠被有效地分配和釋放。ARC是Swift的一個重要特性，使開發者無需手動管理記憶體，從而減少了記憶體洩漏和釋放不當的風險。</p><ul><li>Swift會用它自動管理記憶體，無需我們手動操作，但你確實要考慮物件之間的關係以避免記憶體洩漏（Memory Leak）</li><li>每次建立一個類別的實例時，ARC會分配一塊記憶體來儲存關於這個實例的所有資料</li><li>ARC會在Lifetime結束時自動釋放（deallocate）記憶體中的物件</li></ul><h2>ARC工作原理</h2><p>它的運作方式很簡單，當有一個物件被創立的時候，它的ARC會初始化為1，當有新的引用指向這個物件時就會加1，當一個引用不再存在時ARC就會減1，很簡單的加減法吧！</p><p>這邊用兩種方式寫個故事幫助你們瞭解</p><h3>文字版</h3><p>有一天，David走在路上，看到了閃亮的<code>iPhone XR</code>。他被它的功能和外觀所吸引，決定拿走了它並成為了它的持有者。這個時候，因為David引用了<code>iPhone XR</code>iPhone的ARC增加到2。</p><p>過了一會，John也走過來，他看到了這支<code>iPhone XR</code>，並說這支手機是他的，因此他要求對方將它交給John。現在，iPhone的ARC變成了3。</p><p>然而，這個情況並不持久。不久後，一位警察出現，調查了手機的來源，發現這支iPhone根本不屬於David或John。他們兩人被告知不能再持有這支手機，因為它並不屬於他們中的任何一個。於是，David和John都取消了對iPhone的引用，ARC迅速降為1。</p><p>最後也不知道這支手機是誰的，所以決定進行銷毀，<code>iPhone XR</code>也取消了對iPhone的引用，所以ARC歸零從此就消失在這個世界上(從記憶體中釋放)。</p><h3>程式碼版</h3><p>故事中用到的<code>Phone</code>跟<code>Person</code>的類別可以至下一段程式碼查看</p><pre><code><span class="comment">//有一天，David走在路上，看到了閃亮的`iPhone XR`。他被它的功能和外觀所吸引，決定拿走了它並成為了它的持有者。這個時候，因為David引用了`iPhone XR`iPhone的ARC增加到2。</span>
<span class="keyword">var</span> iPhone: <span class="type">Phone</span>? = <span class="type">Phone</span>(name: <span class="string">"iPhone XR"</span>) <span class="comment">// ARC = 1</span>
<span class="keyword">var</span> david: <span class="type">Person</span> = <span class="type">Person</span>(name: <span class="string">"David"</span>)
david.<span class="property">phone</span> = iPhone <span class="comment">// ARC = 2

//過了一會，John也走過來，他看到了這支`iPhone XR`，並說這支手機是他的，因此他要求對方將它交給John。現在，iPhone的ARC變成了3。</span>
<span class="keyword">var</span> john: <span class="type">Person</span> = <span class="type">Person</span>(name: <span class="string">"John"</span>)
john.<span class="property">phone</span> = iPhone <span class="comment">// ARC = 3

//然而，這個情況並不持久。不久後，一位警察出現，調查了手機的來源，發現這支iPhone根本不屬於David或John。他們兩人被告知不能再持有這支手機，因為它並不屬於他們中的任何一個。於是，David和John都取消了對iPhone的引用，ARC迅速降為1。</span>
david.<span class="property">phone</span> = <span class="keyword">nil</span> <span class="comment">// ARC = 2</span>
john.<span class="property">phone</span> = <span class="keyword">nil</span> <span class="comment">// ARC = 1

//最後也不知道這支手機是誰的，所以決定進行銷毀，`iPhone XR`也取消了對iPhone的引用，所以ARC歸零從此就消失在這個世界上(從記憶體中釋放)。</span>
iPhone = <span class="keyword">nil</span> <span class="comment">// ARC = 0</span>
</code></pre><pre><code><span class="keyword">class</span> Person {
    <span class="keyword">var</span> name: <span class="type">String</span>
    <span class="keyword">var</span> phone: <span class="type">Phone</span>?
    <span class="keyword">init</span> (name: <span class="type">String</span>) {
        <span class="keyword">self</span>.<span class="property">name</span> = name
    }
}

<span class="keyword">class</span> Phone {
    <span class="keyword">var</span> name: <span class="type">String</span>
    <span class="keyword">init</span>(name: <span class="type">String</span>) {
        <span class="keyword">self</span>.<span class="property">name</span> = name
    }
}
</code></pre><h2>Retain Cycle是什麼，怎麼發生的?</h2><p>Retain Cycle就是指物件存在記憶體中，但是不知道什麼原因所以無法被釋放。 當兩個物件互相引用時就有可能會發生Retain Cycle，以下面的例子來說明好了，可以邊看邊對照。</p><h3>故事版</h3><p>在遙遠的宇宙中，有兩顆星星。這兩顆星星互相吸引，彷彿注定要一起閃耀，但他們的相遇並不如表面上看起來那麼簡單。</p><p>我跟女朋友很喜歡觀星，有天我們找到兩顆超漂亮的星星，我們決定把它們變成我們的並且取名為<code>Shelly</code>跟<code>Ben</code>，這兩顆星星互相吸引，我感覺它們有某種連結就像是對情侶，所以他們在宇宙中建立了一條神秘的聯繫，這就像是將他們的光芒結合在一起。</p><p>某一天我跟女朋友已經不喜歡觀星了，決定不再管那些星星，斷開我們跟星星之間的結繫，但星星的光芒並沒有消失。這是因為這兩顆星星在彼此間建立了強大的連結，就像他們在宇宙中留下了一條微弱的光芒之線，使它們互相引用。</p><p>儘管我們不再觀察這些星星也找不到它們，但這些光芒仍然存在，因為ARC保持著它們的存在。它們將永遠閃耀在宇宙中，無法再被引用，就像永遠無法再見面的舊情人。</p><p>這個故事反映了ARC的運作原理。即使物件之間的引用關係已經斷開，但當ARC還保持對它們的引用時，它們將繼續存在，無法被釋放。ARC確保了記憶體的正確管理，但也提醒我們要謹慎處理引用，以避免出現意外的情況。</p><h3>程式碼版</h3><p>故事中用到的<code>Star</code>跟<code>Person</code>的類別可以至下一段程式碼查看</p><pre><code><span class="keyword">var</span> me: <span class="type">Person</span> = <span class="type">Person</span>(name: <span class="string">"me"</span>)
<span class="keyword">var</span> girlfriend: <span class="type">Person</span> = <span class="type">Person</span>(name: <span class="string">"girlfriend"</span>)
<span class="comment">// 我跟女朋友很喜歡觀星，有天我們各自找到超漂亮的星星，我們決定把那些星星變成我們的並且取名為`Shelly`跟`Ben`</span>
var shelly: <span class="type">Star</span> = <span class="type">Star</span>(name: <span class="string">"Shelly"</span>) <span class="comment">// shelly ARC = 1</span>
<span class="keyword">var</span> ben: <span class="type">Star</span> = <span class="type">Star</span>(name: <span class="string">"Ben"</span>) <span class="comment">// ben ARC = 1</span>

me.<span class="property">star</span> = ben
girlfriend.<span class="property">star</span> = shelly

<span class="comment">// 這兩顆星星互相吸引，我感覺它們有某種連結就像是對情侶，所以他們在宇宙中建立了一條神秘的聯繫，這就像是將他們的光芒結合在一起。</span>
ben.<span class="property">linkStar</span> = shelly <span class="comment">// ben ARC = 2</span>
shelly.<span class="property">linkStar</span> = ben <span class="comment">// shelly ARC = 2

// 某一天我跟女朋友已經不喜歡觀星了，決定不再管那些星星，斷開我們跟星星之間的結繫</span>
me.<span class="property">star</span> = <span class="keyword">nil</span> <span class="comment">// ben ARC = 1</span>
girlfriend.<span class="property">star</span> = <span class="keyword">nil</span> <span class="comment">// shelly ARC = 1

// 但星星的光芒並沒有消失。這是因為這兩顆星星在彼此間建立了強大的連結，就像他們在宇宙中留下了一條微弱的光芒之線，使它們互相引用。
// 儘管我們不再觀察這些星星也找不到它們，但這些光芒仍然存在，因為ARC保持著它們的存在。它們將永遠閃耀在宇宙中，無法再被引用，就像永遠無法再見面的舊情人。
// 這個故事反映了自動引用計數（ARC）的運作原理。即使物件之間的引用關係已經斷開，但當ARC還保持對它們的引用時，它們將繼續存在，無法被釋放。ARC確保了記憶體的正確管理，但也提醒我們要謹慎處理引用，以避免出現意外的情況。</span>
</code></pre><pre><code><span class="keyword">class</span> Person {
    <span class="keyword">var</span> name: <span class="type">String</span>
    <span class="keyword">var</span> star: <span class="type">Star</span>?
    <span class="keyword">init</span>(name: <span class="type">String</span>) {
        <span class="keyword">self</span>.<span class="property">name</span> = name
    }
}

<span class="keyword">class</span> Star {
    <span class="keyword">var</span> name: <span class="type">String</span>
    <span class="keyword">var</span> linkStar: <span class="type">Star</span>?
    <span class="keyword">init</span>(name: <span class="type">String</span>) {
        <span class="keyword">self</span>.<span class="property">name</span> = name
    }
}
</code></pre><h2>如何避免Memory Leak</h2><p>前面說的Retain Cycle就可能會造成Memory Leak</p><ul><li>Retain Cycle就是兩物件之間強引用（Strong Reference）</li><li>Memory Leak就是物件存在記憶體中，但是程式已經存取不到也無法釋放</li></ul><p>這邊要介紹兩個Keyword來解決問題，這兩個方法的核心原理都是這個物件不會加入ARC進行計數， 第一個是<strong>weak</strong>，就在宣告變數的前面加上<code>weak</code>就好了！</p><pre><code><span class="keyword">weak var</span> star: <span class="type">Star</span>?
</code></pre><p>第二個是<strong>unowned</strong>，跟<code>weak</code>差在optional的部分，當你確認這個物件在它生命週期結束前都不會變成<code>nil</code>就可以使用它</p><pre><code><span class="keyword">unowned var</span> star: <span class="type">Star</span>
</code></pre><p>簡單來說</p><ul><li><code>weak</code>用來修飾<code>optional</code></li><li><code>unowned</code>用來修飾<code>non-optional</code></li></ul><h2>Reference</h2><ul><li><a href="https://docs.swift.org/swift-book/documentation/the-swift-programming-language/automaticreferencecounting/">The Swift Programming Language (5.9) - Automatic Reference Counting</a></li><li><a href="https://chunyili200556.medium.com/">ChunYi LI</a> 的 <a href="https://medium.com/one-two-swift/arc-%E8%A8%98%E6%86%B6%E9%AB%94%E7%AE%A1%E7%90%86-weak-unowned-b3f5ae4239c7">Swift基礎 — ARC 記憶體管理Weak 、Unowned</a></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://vickcoo.github.io/posts/Swift-Structs-and-Classes-A-Friendly-Guide-to-Their-Differences-and-Similarities%5Ben%5D</guid><title>Swift Structs and Classes: A Friendly Guide to Their Differences and Similarities</title><description>Dive into the world of Swift programming to struct and class and break down similarities and differences</description><link>https://vickcoo.github.io/posts/Swift-Structs-and-Classes-A-Friendly-Guide-to-Their-Differences-and-Similarities%5Ben%5D</link><pubDate>Wed, 20 Sep 2023 10:42:00 +0800</pubDate><content:encoded><![CDATA[<p>When your're delving into the world of Swift programming, you'll inevitably come across two essential concepts: <code>struct</code> and <code>class</code>. In this guide, we'll unravel the mysteries of struct and class, making them easier to understand.</p><h2>Similarities</h2><ul><li>Define properties (that including computed properties &amp; property observer)</li><li>Define method</li><li>Define subscripts to provide access to their value</li><li>Define initializers</li><li>Be extended to expand their functionality beyond a default implementation</li><li>These have the ability to conform to protocols and then provide functionality</li></ul><h2>Differences</h2><p>class have adiitional capabilities that structure don't have.</p><ul><li><a href="https://docs.swift.org/swift-book/documentation/the-swift-programming-language/inheritance/">Inheritance</a></li><li><a href="https://docs.swift.org/swift-book/documentation/the-swift-programming-language/typecasting/">Type casting</a></li><li><a href="https://docs.swift.org/swift-book/documentation/the-swift-programming-language/deinitialization/">Deinitializers</a></li><li><a href="https://docs.swift.org/swift-book/documentation/the-swift-programming-language/automaticreferencecounting/">ARC(Automatic Reference Counting)</a></li></ul><p>other difference thing.</p><ul><li>Value Type &amp; Reference Type</li><li>Mutable &amp; Immutable</li><li>Memberwise Initializer</li></ul><h2>Syntax</h2><p>this is the least code to define this struct and class, I'll show you actually example later.</p><pre><code><span class="keyword">struct</span> SomeStruct {
}
<span class="keyword">class</span> SomeClass {
}
</code></pre><h2>Value Type &amp; Reference Type</h2><p>Swift struct is Value Type, this means any properties in struct instance, they always copy when they're passed around in your code.</p><pre><code><span class="keyword">struct</span> Person {
    <span class="keyword">var</span> name: <span class="type">String</span>
    <span class="keyword">var</span> age: <span class="type">Int</span>
}

<span class="keyword">let</span> andrew = <span class="type">Person</span>(name: <span class="string">"Andrew"</span>, age: <span class="number">22</span>)
<span class="keyword">var</span> eric = andrew

eric.<span class="property">age</span> = <span class="number">41</span>

<span class="call">print</span>(andrew.<span class="property">age</span>) <span class="comment">// print: 22</span>
<span class="call">print</span>(eric.<span class="property">age</span>) <span class="comment">// print: 41</span>
</code></pre><p>And class is Reference Type, that aren't copied when they're passed. That reference same instance. For example, similar we defined struct above</p><pre><code><span class="keyword">class</span> Person {
    <span class="keyword">var</span> name: <span class="type">String</span>
    <span class="keyword">var</span> age: <span class="type">Int</span>

    <span class="keyword">init</span>(name: <span class="type">String</span>, age: <span class="type">Int</span>) {
        <span class="keyword">self</span>.<span class="property">name</span> = name
        <span class="keyword">self</span>.<span class="property">age</span> = age
    }
}

<span class="keyword">let</span> andrew = <span class="type">Person</span>(name: <span class="string">"Andrew"</span>, age: <span class="number">22</span>)
<span class="keyword">var</span> eric = andrew

eric.<span class="property">age</span> = <span class="number">41</span>

<span class="call">print</span>(andrew.<span class="property">age</span>) <span class="comment">// print: 41</span>
<span class="call">print</span>(eric.<span class="property">age</span>) <span class="comment">// print: 41</span>
</code></pre><h2>Initializers</h2><p>In Swift, when you create a struct and define properties, struct automatically get a initializer called <em>Memberwise Initializer</em>. but your must manually define a iniitializer in class</p><pre><code><span class="comment">// struct</span>
<span class="keyword">struct</span> Person {
    <span class="keyword">var</span> name: <span class="type">String</span>
    <span class="keyword">var</span> age: <span class="type">Int</span>
}
<span class="keyword">let</span> leo = <span class="type">Person</span>(name: <span class="string">"Leo"</span>, age: <span class="number">32</span>)

<span class="comment">// class</span>
<span class="keyword">class</span> Person {
    <span class="keyword">var</span> name: <span class="type">String</span>
    <span class="keyword">var</span> age: <span class="type">Int</span>

    <span class="keyword">init</span>(name: <span class="type">String</span>, age: <span class="type">Int</span>) {
        <span class="keyword">self</span>.<span class="property">name</span> = name
        <span class="keyword">self</span>.<span class="property">age</span> = age
    }
}
<span class="keyword">let</span> leo = <span class="type">Person</span>(name: <span class="string">"Leo"</span>, age: <span class="number">32</span>)
</code></pre><h2>Mutating</h2><p>you can't modify any properties insdie method in struct by default, the solution is mark it using <code>mutating</code> keyword, like this:</p><pre><code><span class="keyword">struct</span> Person {
    <span class="keyword">var</span> name: <span class="type">String</span>

    <span class="keyword">mutating func</span> setName(name: <span class="type">String</span>) {
        <span class="keyword">self</span>.<span class="property">name</span> = name
    }
}
</code></pre><h2>Reference</h2><ul><li><a href="https://docs.swift.org/swift-book/documentation/the-swift-programming-language/classesandstructures">The Swift Programming Language</a></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://vickcoo.github.io/posts/Swift-Structs-and-Classes-A-Friendly-Guide-to-Their-Differences-and-Similarities%5Bzh-TW%5D</guid><title>Swift Structures &amp; Classes：它們之間的差異和相似之處</title><description>深入Swift程式設計世界，進行Structures和Classes分析相似點和差異</description><link>https://vickcoo.github.io/posts/Swift-Structs-and-Classes-A-Friendly-Guide-to-Their-Differences-and-Similarities%5Bzh-TW%5D</link><pubDate>Wed, 20 Sep 2023 10:42:00 +0800</pubDate><content:encoded><![CDATA[<p>當您深入研究 Swift 程式設計世界時，您將不可避免地遇到兩個基本概念：<code>struct</code>和<code>class</code>。在這篇文章中，我們將揭開它們之間的神秘面紗，使它們更容易理解。</p><h2>相似之處</h2><ul><li>定義屬性(Property)，包含<strong>計算屬性</strong>(Computed Property)跟<strong>屬性觀察器</strong>(Property Observer)</li><li>定義方法(Function)</li><li>定義下標(Subscript)來提供存取資料的方式</li><li>定義建構子(Initializer)</li><li>除了Apple提供的方法，還可以進行自訂義擴充(Extension)額外方法</li><li>它們都可以遵循Protocols</li></ul><h2>差異之處</h2><p>Class有的額外功能，且Structure沒有的</p><ul><li><a href="https://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=&ved=2ahUKEwi8yfPGo46CAxXFr1YBHaS_D4oQFnoECAoQAQ&url=https%3A%2F%2Fitisjoe.gitbooks.io%2Fswiftgo%2Fcontent%2Fch2%2Finheritance.html&usg=AOvVaw3owmh7jZ4g21R0OnO_JTFl&opi=89978449">繼承</a></li><li><a href="https://tommy60703.gitbooks.io/swift-language-traditional-chinese/content/chapter2/18_Type_Casting.html">型別轉換</a></li><li><a href="https://itisjoe.gitbooks.io/swiftgo/content/ch2/initialization_deinitialization.html#deinitializer">解構式</a></li><li><a href="https://tommy60703.gitbooks.io/swift-language-traditional-chinese/content/chapter2/16_Automatic_Reference_Counting.html">ARC(自動參考計數)</a></li></ul><p>其他不同的地方</p><ul><li>Value Type &amp; Reference Type</li><li>可變的(Mutable) &amp; 不可變的(Immutable)</li><li><a href="https://itisjoe.gitbooks.io/swiftgo/content/ch2/classes_structures.html#memberwise_initializer">Memberwise Initializer</a></li></ul><h2>語法</h2><p>這是定義出Structure跟Class最基本的程式碼，後面會繼續為你帶來實際的範例</p><pre><code><span class="keyword">struct</span> SomeStruct {
}
<span class="keyword">class</span> SomeClass {
}
</code></pre><h2>Value Type &amp; Reference Type</h2><p>Swift中的Structure是Value Type，這代表Structure的實例中的屬性，它們在你的程式碼中傳遞時都是會用複製值</p><pre><code><span class="keyword">struct</span> Person {
    <span class="keyword">var</span> name: <span class="type">String</span>
    <span class="keyword">var</span> age: <span class="type">Int</span>
}

<span class="keyword">let</span> andrew = <span class="type">Person</span>(name: <span class="string">"Andrew"</span>, age: <span class="number">22</span>)
<span class="keyword">var</span> eric = andrew

eric.<span class="property">age</span> = <span class="number">41</span>

<span class="call">print</span>(andrew.<span class="property">age</span>) <span class="comment">// print: 22</span>
<span class="call">print</span>(eric.<span class="property">age</span>) <span class="comment">// print: 41</span>
</code></pre><p>class是Reference Type，跟structure不同的是當你把class的實例指定給另一個變數，會參照到同一個位址，意思不管修改哪一個實例都是修改同一個，可以參考下面範例</p><pre><code><span class="keyword">class</span> Person {
    <span class="keyword">var</span> name: <span class="type">String</span>
    <span class="keyword">var</span> age: <span class="type">Int</span>

    <span class="keyword">init</span>(name: <span class="type">String</span>, age: <span class="type">Int</span>) {
        <span class="keyword">self</span>.<span class="property">name</span> = name
        <span class="keyword">self</span>.<span class="property">age</span> = age
    }
}

<span class="keyword">let</span> andrew = <span class="type">Person</span>(name: <span class="string">"Andrew"</span>, age: <span class="number">22</span>)
<span class="keyword">var</span> eric = andrew

eric.<span class="property">age</span> = <span class="number">41</span>

<span class="call">print</span>(andrew.<span class="property">age</span>) <span class="comment">// print: 41</span>
<span class="call">print</span>(eric.<span class="property">age</span>) <span class="comment">// print: 41</span>
</code></pre><h2>建構子 Initializers</h2><p>在Swift中當你建立structure並且定義了一些屬性，structure會自動產生建構子(Initializer)它有一個專有名詞叫做<a href="https://docs.swift.org/swift-book/documentation/the-swift-programming-language/initialization/">Memberwise Initializer</a>，但是在class中並沒有這麼方便的功能，還是需要自己手動建立</p><pre><code><span class="comment">// struct</span>
<span class="keyword">struct</span> Person {
    <span class="keyword">var</span> name: <span class="type">String</span>
    <span class="keyword">var</span> age: <span class="type">Int</span>
}
<span class="keyword">let</span> leo = <span class="type">Person</span>(name: <span class="string">"Leo"</span>, age: <span class="number">32</span>)

<span class="comment">// class</span>
<span class="keyword">class</span> Person {
    <span class="keyword">var</span> name: <span class="type">String</span>
    <span class="keyword">var</span> age: <span class="type">Int</span>

    <span class="keyword">init</span>(name: <span class="type">String</span>, age: <span class="type">Int</span>) {
        <span class="keyword">self</span>.<span class="property">name</span> = name
        <span class="keyword">self</span>.<span class="property">age</span> = age
    }
}
<span class="keyword">let</span> leo = <span class="type">Person</span>(name: <span class="string">"Leo"</span>, age: <span class="number">32</span>)
</code></pre><h2>使用 Mutating</h2><p>在structure裡預設你不能修改裡面的屬性，可使用關鍵字<code>mutating</code>來達成修改屬性的目的</p><p>可以參考Paul Husdon的這篇文章<a href="https://www.hackingwithswift.com/sixty/7/5/mutating-methods">Mutating methods</a></p><pre><code><span class="keyword">struct</span> Person {
    <span class="keyword">var</span> name: <span class="type">String</span>

    <span class="keyword">mutating func</span> setName(name: <span class="type">String</span>) {
        <span class="keyword">self</span>.<span class="property">name</span> = name
    }
}
</code></pre><h2>參考來源</h2><ul><li><a href="https://docs.swift.org/swift-book/documentation/the-swift-programming-language/classesandstructures">The Swift Programming Language</a></li></ul>]]></content:encoded></item></channel></rss>